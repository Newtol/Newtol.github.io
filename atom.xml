<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://Newtol.github.io</id>
    <title>Newtol后端技术</title>
    <updated>2022-06-04T15:31:44.648Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://Newtol.github.io"/>
    <link rel="self" href="https://Newtol.github.io/atom.xml"/>
    <subtitle>学着做一个有温度、有思想、有能力的人</subtitle>
    <logo>https://Newtol.github.io/images/avatar.png</logo>
    <icon>https://Newtol.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, Newtol后端技术</rights>
    <entry>
        <title type="html"><![CDATA[【奇淫技巧】IDEA自动删除无用的引用]]></title>
        <id>https://Newtol.github.io/post/qi-yin-ji-qiao-idea-zi-dong-shan-chu-wu-yong-de-yin-yong/</id>
        <link href="https://Newtol.github.io/post/qi-yin-ji-qiao-idea-zi-dong-shan-chu-wu-yong-de-yin-yong/">
        </link>
        <updated>2022-06-04T14:39:43.000Z</updated>
        <content type="html"><![CDATA[<p>背景：有时候我们在开发的过程中不再引用一些类，但是class文件中import引用标识仍然存在，如果这样的情况多了就会导致我们的引用很长且及其不美观</p>
<p>方法：快捷键【ctrl+alt+s】或者点击【File】-&gt;打开【Settings】，找到【Editor】-&gt;【General】-&gt;【Auto Import】-&gt;【Optimize imports on the fly】打上勾，如下图所示：</p>
<figure data-type="image" tabindex="1"><img src="https://Newtol.github.io/post-images/1654354886514.png" alt="" loading="lazy"></figure>
<p>就可以解决该问题了！</p>
<p>欢迎大家关注我的公众号【Newtol】,不定期将有学习资源分享！！！<br>
<img src="https://Newtol.github.io/post-images/1654355136681.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[【面试系列】Java后台基础知识点总结]]></title>
        <id>https://Newtol.github.io/post/mian-shi-xi-lie-java-hou-tai-ji-chu-zhi-shi-dian-zong-jie/</id>
        <link href="https://Newtol.github.io/post/mian-shi-xi-lie-java-hou-tai-ji-chu-zhi-shi-dian-zong-jie/">
        </link>
        <updated>2022-04-10T10:46:12.000Z</updated>
        <summary type="html"><![CDATA[<p>今年的金三银四似乎比以往要困难很多，博主特意在这个时候整理了一些Java面试过程中涉及的基础知识，方便大家查缺补漏。</p>
]]></summary>
        <content type="html"><![CDATA[<p>今年的金三银四似乎比以往要困难很多，博主特意在这个时候整理了一些Java面试过程中涉及的基础知识，方便大家查缺补漏。</p>
<!-- more -->
<h1 id="java后台基础知识点总结">Java后台基础知识点总结</h1>
<p><ul class="markdownIt-TOC">
<li><a href="#java%E5%90%8E%E5%8F%B0%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%E7%82%B9%E6%80%BB%E7%BB%93">Java后台基础知识点总结</a>
<ul>
<li><a href="#1-java-%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B">1. Java 基本数据类型</a>
<ul>
<li><a href="#11-%E8%87%AA%E5%8A%A8%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2">1.1 自动类型转换</a></li>
<li><a href="#12-%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E5%92%8C%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1">1.2 自动装箱和自动拆箱</a></li>
<li><a href="#13-int-%E5%92%8C-%E5%92%8C-integer-%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">1.3 int 和 和 Integer 有什么区别？</a></li>
<li><a href="#14-string-stringbuffer-stringbuilder%E7%9A%84%E5%8C%BA%E5%88%AB">1.4 String、StringBuffer、StringBuilder的区别：</a></li>
</ul>
</li>
<li><a href="#2-java-%E4%BF%AE%E9%A5%B0%E7%AC%A6">2. Java 修饰符</a>
<ul>
<li><a href="#21-%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">2.1 访问修饰符</a></li>
<li><a href="#22-%E9%9D%9E%E8%AE%BF%E9%97%AE%E4%BF%AE%E9%A5%B0%E7%AC%A6">2.2 非访问修饰符</a></li>
<li><a href="#23-java%E5%8F%98%E9%87%8F">2.3 Java变量</a></li>
</ul>
</li>
<li><a href="#3-java-%E7%BB%A7%E6%89%BF">3. Java 继承</a>
<ul>
<li><a href="#31-%E6%96%B9%E6%B3%95%E9%87%8D%E8%BD%BD%E5%92%8C%E6%96%B9%E6%B3%95%E9%87%8D%E5%86%99">3.1 方法重载和方法重写</a></li>
<li><a href="#32-%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%92%8C%E6%8E%A5%E5%8F%A3">3.2 抽象类和接口</a></li>
<li><a href="#33-super%E5%92%8Cthis%E5%85%B3%E9%94%AE%E5%AD%97">3.3 super和this关键字</a></li>
<li><a href="#34-java%E6%9E%84%E9%80%A0%E5%99%A8">3.4 Java构造器</a></li>
</ul>
</li>
<li><a href="#4-java-%E5%BC%82%E5%B8%B8">4. Java 异常</a>
<ul>
<li><a href="#41-java%E5%BC%82%E5%B8%B8%E5%88%86%E7%B1%BB">4.1 Java异常分类</a></li>
<li><a href="#42-%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86%E6%9C%BA%E5%88%B6">4.2 异常处理机制</a></li>
</ul>
</li>
<li><a href="#5-java-object">5. Java Object</a>
<ul>
<li><a href="#51-object%E6%96%B9%E6%B3%95%E6%A6%82%E8%BF%B0">5.1 Object方法概述</a></li>
<li><a href="#52-%E5%92%8Cequals%E7%9A%84%E5%8C%BA%E5%88%AB">5.2 “==”和equals的区别：</a></li>
<li><a href="#53%E4%B8%BA%E4%BB%80%E4%B9%88%E9%87%8D%E5%86%99equals%E6%96%B9%E6%B3%95%E5%90%8E%E9%9C%80%E8%A6%81%E9%87%8D%E5%86%99hashcode">5.3为什么重写equals方法后需要重写hashcode?</a></li>
<li><a href="#54-notify%E5%92%8Cnotifyall%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB">5.4 notify()和notifyAll有什么区别？</a></li>
<li><a href="#55-%E4%B8%BA%E4%BB%80%E4%B9%88waitnotifynotifyall%E6%98%AFobject%E8%80%8C%E4%B8%8D%E6%98%AFthread%E6%96%B9%E6%B3%95">5.5 为什么wait/notify/notifyAll是Object而不是Thread方法？</a></li>
<li><a href="#56-clone%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E5%92%8Cnew-%E4%B8%80%E4%B8%AA%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8C%BA%E5%88%AB">5.6 clone一个对象和new 一个对象的区别</a></li>
<li><a href="#57-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D">5.7 深拷贝和浅拷贝</a></li>
</ul>
</li>
<li><a href="#6-java%E5%8F%8D%E5%B0%84">6. Java反射</a>
<ul>
<li><a href="#61-%E5%8F%8D%E5%B0%84%E7%9A%84%E4%BD%9C%E7%94%A8">6.1 反射的作用</a></li>
<li><a href="#62-%E9%9D%99%E6%80%81%E4%BB%A3%E7%90%86%E5%92%8C%E5%8A%A8%E6%80%81%E4%BB%A3%E7%90%86">6.2 静态代理和动态代理</a></li>
</ul>
</li>
<li><a href="#7-java-%E6%B3%A8%E8%A7%A3">7. Java 注解</a></li>
<li><a href="#8-java-%E6%B3%9B%E5%9E%8B">8. Java 泛型</a>
<ul>
<li><a href="#81-%E6%B3%9B%E5%9E%8B%E7%9A%84%E4%BD%BF%E7%94%A8%E6%83%85%E5%BD%A2">8.1 泛型的使用情形</a></li>
<li><a href="#82-%E9%80%9A%E9%85%8D%E7%AC%A6">8.2 通配符&lt;?&gt;</a></li>
<li><a href="#83-%E7%B1%BB%E5%9E%8B%E6%93%A6%E9%99%A4">8.3 类型擦除</a></li>
</ul>
</li>
<li><a href="#9-java%E5%86%85%E9%83%A8%E7%B1%BB">9. Java内部类</a>
<ul>
<li><a href="#91-%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB">9.1 成员内部类</a></li>
<li><a href="#92-%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB">9.2 局部内部类</a></li>
<li><a href="#93-%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB">9.3 匿名内部类</a></li>
<li><a href="#94-%E9%9D%99%E6%80%81%E5%86%85%E9%83%A8%E7%B1%BB">9.4 静态内部类</a></li>
</ul>
</li>
<li><a href="#10-java-%E6%9E%9A%E4%B8%BEenum">10. Java 枚举（Enum）</a>
<ul>
<li><a href="#101-enum%E7%9A%84%E7%AE%80%E5%8D%95%E4%BD%BF%E7%94%A8">10.1 Enum的简单使用</a></li>
<li><a href="#102-enum%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86">10.2 Enum实现原理</a></li>
</ul>
</li>
</ul>
</li>
</ul>
</p>
<h2 id="1-java-基本数据类型">1. Java 基本数据类型</h2>
<p>Java中总共有八种基本的数据类型：byte(1)、short(2)、int(4)、long(8)、char(2)、float(4)、double(8)和boolean【PS:括号内的为所占的字节数】,每种基本类型都有其对应的包装类。</p>
<h3 id="11-自动类型转换">1.1 自动类型转换</h3>
<p>自动类型转换 ：低级变量可以直接转换为高级变量,转换规则为：</p>
<pre><code>byte→short(char)→int→long→float→double
</code></pre>
<p>例如，下面的语句可以编译通过：</p>
<pre><code class="language-java">byte b;
int i=b;
long l=b;
float f=b;
double d=b;
</code></pre>
<p>但是将double型变量赋值给float变量，不加强转的话会报错。</p>
<h3 id="12-自动装箱和自动拆箱">1.2 自动装箱和自动拆箱</h3>
<p>简单的说，装箱就是就是将基本数据类型转换为包装器类型；拆箱就是将包装器类型转换为基本数据类型。</p>
<p>例如：</p>
<pre><code class="language-java">Integer i = 10;  //装箱
int n = i;   //拆箱
</code></pre>
<p><strong>注意事项</strong>：</p>
<ol>
<li>
<p>对于Integer而言，如果数值在[-128,127]之间，便返回指向IntegerCache.cache中已经存在的对象的引用；否则创建一个新的Integer对象。例如：</p>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {         
        Integer i1 = 100;
        Integer i2 = 100;
        Integer i3 = 200;
        Integer i4 = 200;
        System.out.println(i1==i2);
        System.out.println(i3==i4);
    }
}
</code></pre>
<p>输出的结果就为：</p>
<pre><code class="language-java">true
false
</code></pre>
</li>
<li>
<p>Integer i = new Integer(xxx)和Integer i =xxx;这两种方式的区别。</p>
<ul>
<li>第一种方式不会触发自动装箱的过程；而第二种方式会触发；</li>
<li>在执行效率和资源占用上的区别。第二种方式的执行效率和资源占用在一般性情况下要优于第一种情况（注意这并不是绝对的）。</li>
</ul>
</li>
<li>
<p>当 <strong>==</strong> 运算符的两个操作数都是包装器类型的引用，则是比较指向的是否是同一个对象，而如果其中有一个操作数是表达式（即包含算术运算）则比较的是数值（即会触发自动拆箱的过程）；另外，对于包装器类型，equals方法并不会进行类型转换。例如：</p>
<pre><code class="language-java">public class Main {
    public static void main(String[] args) {        
        Integer a = 1;
        Integer b = 2;
        Integer c = 3;
        Integer d = 3;
        Integer e = 320;
        Integer f = 320;
        Long g = 3L;
        Long h = 2L;
        // 因为c、d都是包装类型，所以返回true
        System.out.println(c==d);
        // 因为e、f都大于128，属于不同的对象，所以返回false
        System.out.println(e==f);
        // 因为含有算数运算符，所以比较的数值，返回true
        System.out.println(c==(a+b));
        // 因为equals不会类型转换，所以比较的是类型，返回true
        System.out.println(c.equals(a+b));
        // 比较数值，所以返回true
        System.out.println(g==(a+b));
        // 因为equals不会类型转换,a、b为Integer，所以返回false
        System.out.println(g.equals(a+b));
        // a向上转型为Long,所以返回true
        System.out.println(g.equals(a+h));
    }
}
</code></pre>
</li>
</ol>
<h3 id="13-int-和-和-integer-有什么区别">1.3 int 和 和 Integer 有什么区别？</h3>
<ol>
<li>Integer是int的包装类；int是基本数据类型；</li>
<li>Integer变量必须实例化后才能使用；int变量不需要；</li>
<li>Integer实际是对象的引用，指向此new的Integer对象；int是直接存储数据值 ；</li>
<li>Integer的默认值是null；int的默认值是0。</li>
</ol>
<h3 id="14-string-stringbuffer-stringbuilder的区别">1.4 String、StringBuffer、StringBuilder的区别：</h3>
<ol>
<li>是否可变：
<ul>
<li>String：字符串常量，在修改时不会改变自身；若修改，等于重新生成新的字符串对象。</li>
<li>StringBuffer、StringBuilder：在修改时会改变对象自身，每次操作都是对 StringBuffer 对象本身进行修改，不是生成新的对象；使用场景：对字符串经常改变情况下，主要方法：append（），insert（）等。</li>
</ul>
</li>
<li>是否线程安全：
<ul>
<li>String：对象定义后不可变，线程安全。</li>
<li>StringBuilder：是线程不安全的，适用于单线程下操作字符串缓冲区大量数据。</li>
<li>StringBuffer：是线程安全的（对调用方法加入同步锁），执行效率较慢，适用于多线程下操作字符串缓冲区大量数据。</li>
</ul>
</li>
<li>String不可变有什么好处？
<ul>
<li>可以缓存 hash 值</li>
<li>String Pool 的需要</li>
<li>线程安全</li>
</ul>
</li>
</ol>
<h2 id="2-java-修饰符">2. Java 修饰符</h2>
<p>Java修饰符：用来定义类、方法或者变量，通常放在语句的最前端。可分为：</p>
<ul>
<li>访问修饰符</li>
<li>非访问修饰符</li>
</ul>
<h3 id="21-访问修饰符">2.1 访问修饰符</h3>
<p>Java中具有四种访问权限：</p>
<ul>
<li>
<p><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</p>
</li>
<li>
<p><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</p>
</li>
<li>
<p><strong>default</strong> (即缺省，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</p>
</li>
<li>
<p><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></p>
</li>
</ul>
<p>访问权限之间的对比如下表所示：</p>
<figure data-type="image" tabindex="1"><img src="https://img-blog.csdnimg.cn/20190409123025310.png" alt="在这里插入图片描述" loading="lazy"></figure>
<h3 id="22-非访问修饰符">2.2 非访问修饰符</h3>
<p>Java中提供的非访问修饰符有：</p>
<ul>
<li>
<p>static：用来<strong>修饰类、方法和变量</strong>。</p>
<ul>
<li>static修饰变量：类所有的实例都共享静态变量，可以直接通过类名来访问它；</li>
<li>static修饰方法：静态方法在类加载的时候就存在了，它不依赖于任何实例，所以 static 方法必须实现，也就是说它不能是抽象方法（abstract）。</li>
<li>static修饰语句块：静态语句块在类初始化时运行一次。</li>
<li>static修饰内部类：静态内部类不依赖外部类，且不能访问外部类的非 static 变量和方法。</li>
</ul>
</li>
<li>
<p>final：用来<strong>修饰类、方法和变量</strong>:</p>
<ul>
<li>final 修饰类：不能够被继承</li>
<li>final 修饰方法：不能被继承类重新定义；</li>
<li>final 修饰变量：如果为基本类型，则数值不可改变，为常量；若为引用类型，则引用不能更改，但引用的对象本身的属性可更改。</li>
</ul>
</li>
<li>
<p>abstract：用来<strong>创建抽象类和抽象方法</strong>。</p>
</li>
<li>
<p>synchronized 和 volatile：主要用于线程的编程。</p>
</li>
</ul>
<p>注意事项：</p>
<ol>
<li>静态成员函数中<strong>不能</strong>调用非静态成员；</li>
<li>非静态成员函数<strong>可以</strong>调用静态成元；</li>
<li>常量成员不能修改，静态成员必须初始化，但可以修改；</li>
<li>静态成员和静态方法可以直接通过类名进行调用，其他成员方法则需要进行实例化后调用。</li>
</ol>
<h3 id="23-java变量">2.3 Java变量</h3>
<p>Java中的变量可分为三种类型：</p>
<ul>
<li>成员变量</li>
<li>局部变量</li>
<li>静态变量</li>
</ul>
<p>它们三者的区别如下图所示：</p>
<figure data-type="image" tabindex="2"><img src="https://img-blog.csdnimg.cn/20190409123044911.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3ODg4MDMx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="3-java-继承">3. Java 继承</h2>
<p>Java面对对象具有三大特性：</p>
<ol>
<li>继承：继承是从已有类得到继承信息创建新类的过程。提供继承信息的类被称为父类（超类、基类）；得到继承信息的类被称为子类（派生类）。继承让变化中的软件系统有了一定的延续性，同时继承也是封装程序中可变因素的</li>
<li>封装：通常认为封装是把数据和操作数据的方法绑定起来，对数据的访问只能通过已定义的接口</li>
<li>多态：多态是指允许不同子类型的对象对同一消息作出不同的响应。要实现多态主要是做两件事：重写和重载。</li>
</ol>
<h3 id="31-方法重载和方法重写">3.1 方法重载和方法重写</h3>
<p>重载：是在一个类里面，是多态在编译器的表现形式。判断方法：</p>
<ul>
<li>方法名相同</li>
<li>形参列表不同</li>
</ul>
<p>重写：是子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。是多态的运行期间的表现形式。判断条件：</p>
<ul>
<li>方法名和形参列表相同</li>
<li>重写方法的返回值或者抛出的异常类型要与被重写的方法的返回值和抛出的异常相同，或者为其子类</li>
<li>重写方法的访问修饰符大于等于被重写方法的访问修饰符</li>
</ul>
<p>注意事项：</p>
<ul>
<li>静态方法不存在重写，形式上的重写只能说是隐藏；</li>
<li>私有方法不存在重写，父类中的private方法，子类中即使定义了也相当于一个新的方法；</li>
</ul>
<h3 id="32-抽象类和接口">3.2 抽象类和接口</h3>
<p>抽象类（abstract）和接口（interface）的区别：</p>
<ol>
<li>抽象类中可以有构造方法，接口中不能；</li>
<li>抽象类中可以有普通成员变量，接口中不能；</li>
<li>抽象类中可以包含非抽象的普通方法，接口不能；</li>
<li>抽象类中的访问类型是：public、protected，接口中默认为：public abstract;</li>
<li>抽象类中可以包含静态方法，接口中不能；</li>
<li>抽象类中的静态成员变量类型任意，接口中仅为：public static final;</li>
<li>一个类只可以继承（extends）一个抽象类，但一个类可以继承（implements）多个接口；</li>
</ol>
<h3 id="33-super和this关键字">3.3 super和this关键字</h3>
<p>this关键字：是指向对象本身的一个指针。this只能在类中的非静态方法中使用，静态方法和静态的代码块中绝对不能出现this。</p>
<ul>
<li>
<p>表示类中的属性和方法：函数参数或者参数中的局部变量和成员变量同名的情况下，成员变量被屏蔽，此时要访问成员变量则需要用&quot;this.成员变量名&quot;来访问成员变量。例如:</p>
<pre><code class="language-java">class B{
    private int x = 1;
    public void out(){
        int x = 2;
        System.out.print(x);//打印2
        System.out.print(this.x);//打印1
    }
}
</code></pre>
</li>
<li>
<p>表示当前对象：在函数中，需要引用该函数所属类的当前对象时候，直接使用this</p>
<pre><code class="language-java">class C{
    public static void main(String[] args){
        C c1 = new C();
        c1.tell();
    }
    public static void tell(){
        System.out.print(this);//打印当前对象的字符串表示
    }
}
</code></pre>
</li>
</ul>
<p>super关键字：</p>
<ul>
<li>
<p>子类调用父类的构造方法：用<code>super(参数列表)</code>的方式调用，参数不是必须的。同时，还要注意<code>super(参数列表)</code>这条语句只能在子类构造方法中的第一行。例如：</p>
<pre><code class="language-java">class A{
    public A(){
        System.out.print(&quot;A&quot;);
    }
}
class B extends A{
    public B(){
        super();//调用父类构造方法，打印A
        System.out.print(&quot;B&quot;);
    }
}
</code></pre>
</li>
<li>
<p>访问父类中被覆盖的同名变量或者方法：如果子类覆盖了父类的中某个方法的实现，可以通过使用 super 关键字来引用父类的方法实现。例如：</p>
<pre><code class="language-java">class A{
    public int a = 1;//可以直接赋值，不用通过构造函数
    public void say(){
        System.out.print(a);
    }
}

class B extends A{
    private int a = 2;
    public void say(){
        System.out.print(super.a);//访问父类的a变量，前提是父类的a变量是公有的
    }
    public void tell(){
        super.say();//调用父类的say()方法而不是子类的say()方法
    }
}
</code></pre>
</li>
</ul>
<h3 id="34-java构造器">3.4 Java构造器</h3>
<p>在Java中，构造方法的主要作用是完后才能对象的初始化工作，把定义对象的参数传给对象的域。</p>
<p>注意事项：</p>
<ol>
<li>
<p>构造方法的方法名必须与类名相同；</p>
</li>
<li>
<p>构造方法没有返回类型，也不能定义为void，在方法名前不声明方法类型；</p>
</li>
<li>
<p>一个类可以定义多个构造方法，如果类在定义时没有定义构造方法，编译器会自动插入一个无参数的默认构造器；</p>
</li>
<li>
<p>子类<strong>不继承</strong>父类的构造器（构造方法或者构造函数）的，它只是<strong>调用</strong>（隐式或显式）。如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。如果父类构造器没有参数，则在子类的构造器中不需要使用 super 关键字调用父类构造器，系统会自动调用父类的无参构造器。</p>
</li>
</ol>
<h2 id="4-java-异常">4. Java 异常</h2>
<p>Java把异常当作对象来处理，并定义一个基类<code>java.lang.Throwable</code>作为所有异常的超类。</p>
<h3 id="41-java异常分类">4.1 Java异常分类</h3>
<p>throwable又可以分为两类：</p>
<ul>
<li>Error：内部错误或者资源耗尽错误，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程</li>
<li>Exception：通常情况下是可以被程序处理的，并且在程序中应该尽可能的去处理这些异常。</li>
</ul>
<p>Exception又可分为：</p>
<ul>
<li>UncheckedException：是程序运行时错误，常见的异常有：
<ul>
<li>ClassNotFoundException：应用程序试图加载类时，找不到相应的类，抛出该异常。</li>
<li>IllegalAccessException：拒绝访问一个类的时候，抛出该异常。</li>
<li>InterruptedException：一个线程被另一个线程中断，抛出该异常。</li>
<li>NoSuchMethodException：请求的方法不存在</li>
<li>NullPointerException：空指针异常</li>
<li>IndexOutOfBoundsException： 数组角标越界异常，常见于操作数组对象时发生。</li>
<li>ClassCastException： 数据类型转换异常</li>
<li>NumberFormatException： 字符串转换为数字异常；出现原因：字符型数据中包含非数字型字符。</li>
</ul>
</li>
<li>CheckedException：需要用 try...catch... 语句捕获并进行处理，并且可以从异常中恢复，常见的有：
<ul>
<li>IOException</li>
<li>SQLException</li>
</ul>
</li>
</ul>
<h3 id="42-异常处理机制">4.2 异常处理机制</h3>
<p>Java的异常处理机制可分为：</p>
<ul>
<li>异常捕获：<strong>try、catch 和 finally</strong></li>
<li>异常抛出：<strong>throws、throw</strong></li>
</ul>
<p>对于异常捕获，我们需要注意的是一下几点：</p>
<p>try语句在返回前，将其他所有的操作执行完，保留好要返回的值，而后转入执行finally中的语句，而后分为以下三种情况：</p>
<ul>
<li>
<p>情况一：如果finally中有return语句，则会将try中的return语句”覆盖“掉，直接执行finally中的return语句，得到返回值，这样便无法得到try之前保留好的返回值。</p>
</li>
<li>
<p>情况二：如果finally中没有return语句，也没有改变要返回值，则执行完finally中的语句后，会接着执行try中的return语句，返回之前保留的值。</p>
</li>
<li>
<p>情况三：如果finally中没有return语句，但是改变了要返回的值，这里有点类似与引用传递和值传递的区别，分以下两种情况：</p>
<ul>
<li>
<p>如果return的数据是基本数据类型或文本字符串，则在finally中对该基本数据的改变不起作用，try中的return语句依然会返回进入finally块之前保留的值。</p>
</li>
<li>
<p>如果return的数据是引用数据类型，而在finally中对该引用数据类型的属性值的改变起作用，try中的return语句返回的就是在finally中改变后的该属性的值</p>
</li>
</ul>
</li>
</ul>
<p>对于异常的抛出，需要注意的是：throws和throw的区别，</p>
<p>throw：</p>
<ul>
<li>throw 语句用在方法体内，表示抛出异常，由方法体内的语句处理。</li>
<li>throw 是具体向外抛出异常的动作，所以它抛出的是一个异常实例，执行 throw 一定是抛出了某种异常</li>
</ul>
<p>throws：</p>
<ul>
<li>throws 语句是用在方法声明后面，表示如果抛出异常，由该方法的调用者来进行异常的处理。</li>
<li>throws 主要是声明这个方法会抛出某种类型的异常，让它的使用者要知道需要捕获的异常的类型。</li>
<li>throws 表示出现异常的一种可能性，并不一定会发生这种异常。</li>
</ul>
<h2 id="5-java-object">5. Java Object</h2>
<h3 id="51-object方法概述">5.1 Object方法概述</h3>
<p>Java中的Object类是所有类的父类，它提供了以下11个方法：</p>
<ol>
<li>
<p><code>public final native Class&lt;?&gt; getClass()</code>：返回当前运行时对象的Class对象，getClass方法是一个final方法，不允许子类重写，并且也是一个native方法。</p>
</li>
<li>
<p><code>public native int hashCode()</code>： 返回散列值，而 equals() 是用来判断两个实例是否等价。等价的两个实例散列值一定要相同，但是散列值相同的两个实例不一定等价。</p>
</li>
<li>
<p><code>public boolean equals(Object obj)</code>：在非空对象引用上equlas具有以下特性：</p>
<p>（一）自反性</p>
<pre><code>x.equals(x); // true
</code></pre>
<p>（二）对称性</p>
<pre><code>x.equals(y) == y.equals(x) // true
</code></pre>
<p>（三）传递性</p>
<pre><code>if(x.equals(y) &amp;&amp; y.equals(z)) {
    x.equals(z); // true;
}
</code></pre>
<p>（四）一致性：多次调用 equals() 方法结果不变</p>
<pre><code>x.equals(y) == x.equals(y); // true
</code></pre>
<p>（五）与 null 的比较：对任何不是 null 的对象 x 调用 x.equals(null) 结果都为 false</p>
<pre><code>x.euqals(null); // false;
</code></pre>
</li>
<li>
<p><code>protected native Object clone() throws CloneNotSupportedException</code>：是一个protected的native方法。由于Object本身没有实现Cloneable接口，所以不重写clone方法并且进行调用的话会抛出异常。且clone函数具有以下特性：</p>
<ul>
<li>x.clone()!=x：x.clone()返回的对象为新建的对象，与原来的对象地址不同。</li>
<li>x.clone().getClass() == x.getClass(）：克隆出的对象与原对象都是同一个类生成的。</li>
<li>x.clone().equals(x)：新的对象与原来的对象相同（在equals()函数下是相同的,所以通常需要覆盖equals()方法）</li>
</ul>
</li>
<li>
<p><code>public String toString()</code>：Object对象的默认实现，即输出类的名字@实例的哈希码的16进制</p>
</li>
<li>
<p><code>public final native void notify()</code>：是一个native方法，并且也是final的，不允许子类重写。唤醒一个在此对象监视器上等待的线程(监视器相当于就是锁的概念)。如果所有的线程都在此对象上等待，那么只会选择一个线程。选择是任意性的，并在对实现做出决定时发生。</p>
</li>
<li>
<p><code>public final native void notifyAll()</code>：跟notify一样，唯一的区别就是会唤醒在此对象监视器上等待的所有线程，而不是一个线程。</p>
</li>
<li>
<p><code>public final native void wait(long timeout) throws InterruptedException</code>：是一个native方法，并且也是final的，不允许子类重写。wait方法会让当前线程等待直到另外一个线程调用对象的notify或notifyAll方法，或者超过参数设置的timeout超时时间。</p>
</li>
<li>
<p><code>public final void wait(long timeout, int nanos) throws InterruptedException</code>：跟wait(long timeout)方法类似，多了一个nanos参数，这个参数表示额外时间（以毫微秒为单位，范围是 0-999999）</p>
</li>
<li>
<p><code>public final void wait() throws InterruptedException</code>：跟之前的2个wait方法一样，只不过该方法一直等待，没有超时时间。</p>
</li>
<li>
<p><code>protected void finalize() throws Throwable { }</code>：该方法的作用是实例被垃圾回收器回收的时候触发的操作finalize方法是一个protected方法，Object类的默认实现是不进行任何操作。</p>
</li>
</ol>
<h3 id="52-和equals的区别">5.2 “==”和equals的区别：</h3>
<blockquote>
<p><code>==</code>：如果比较的对象是基本数据类型，则比较的是数值是否相等；如果比较的是引用数据类型，则比较的是对象的地址值是否相等。在不遇到算术运算的情况下，不会自动拆箱。<br>
<code>equals()</code>：用来比较方法两个对象的内容是否相等。<br>
注意：equals 方法不能用于基本数据类型的变量，如果没有对 equals 方法进行重写，则比较的是引用类型的变量所指向的对象的地址。</p>
</blockquote>
<h3 id="53为什么重写equals方法后需要重写hashcode">5.3为什么重写equals方法后需要重写hashcode?</h3>
<blockquote>
<p>因为考虑到类似HashMap、HashTable、HashSet的这种散列的数据类型的运用。在Object类中，hashCode方法是通过Object对象的地址计算出来的，因为Object对象只与自身相等，所以同一个对象的地址总是相等的，计算取得的哈希码也必然相等，对于不同的对象，由于地址不同，所获取的哈希码自然也不会相等。所以如果重写了equals方法，而不重写hashcode方法，就可能会造成两个相同对象的重复插入。</p>
</blockquote>
<h3 id="54-notify和notifyall有什么区别">5.4 notify()和notifyAll有什么区别？</h3>
<blockquote>
<p>notify()方法不能唤醒某个具体的线程，所以只有一个线程等待的时候才有用。而notifyAll（）唤醒所有的线程，并允许他们争夺锁，确保只有一个线程能继续运行</p>
</blockquote>
<h3 id="55-为什么waitnotifynotifyall是object而不是thread方法">5.5 为什么wait/notify/notifyAll是Object而不是Thread方法？</h3>
<blockquote>
<p>Java提供的锁是对象级的而不是线程级。每个对象都有锁，通过线程获得。因为它们属于锁的操作，而锁属于对象。</p>
</blockquote>
<h3 id="56-clone一个对象和new-一个对象的区别">5.6 clone一个对象和new 一个对象的区别</h3>
<blockquote>
<p>new一个对象： 先根据<em>new</em>后面的类型去分配内存，然后再调用构造函数填充对象的各个域，初始化完成后，一个对象创建完毕，可以把他的引用（地址）发布到外部。</p>
<p>clone一个对象：首先分配与原对象同样大小的内存空间，然后根据原对象中对应的各个域，填充新对象的域，填充完成之后，clone 方法返回，一个新的相同的对象被创建，同样可以把这个新对象的引用发布到外部</p>
</blockquote>
<h3 id="57-深拷贝和浅拷贝">5.7 深拷贝和浅拷贝</h3>
<blockquote>
<p>浅拷贝：拷贝实例和原始实例的引用类型引用同一个对象；</p>
<p>深拷贝：拷贝实例和原始实例的引用类型引用不同对象。</p>
</blockquote>
<p>原理图大概如图所示：</p>
<figure data-type="image" tabindex="3"><img src="https://img-blog.csdnimg.cn/20190409123122465.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L20wXzM3ODg4MDMx,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述" loading="lazy"></figure>
<h2 id="6-java反射">6. Java反射</h2>
<p>Java 中的反射首先是能够获取到Java中要反射类的字节码 ，获取字节码有三种方法 ：</p>
<ul>
<li>Class.forName(className)</li>
<li>类名.class</li>
<li>this.getClass()</li>
</ul>
<p>然后将字节码中的方法，变量，构造函数等映射成相应的 Method、Filed、Constructor 等类，这些类提供了丰富的方法可以被我们所使用。</p>
<h3 id="61-反射的作用">6.1 反射的作用</h3>
<p>Java反射机制主要提供一下的功能：</p>
<ol>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类所具有的成员变量和方法</li>
<li>在运行时调用任意一个对象的方法</li>
<li>生成动态代理</li>
</ol>
<h3 id="62-静态代理和动态代理">6.2 静态代理和动态代理</h3>
<p>静态代理：通常只代理一个类，事先知道要代理的是什么。</p>
<p>动态代理：动态代理是代理一个接口下的多个实现类，不知道要代理什么东西，只有在运行时才知道。动态代理是实现 JDK 里的 InvocationHandler 接口的 invoke 方法，但注意的是代理的是接口，也就是你的业务类必须要实现接口，通过 Proxy 里的 newProxyInstance 得到代理对象。</p>
<p>例如：下图为实现一个ArrayList的动态代理类：</p>
<pre><code class="language-java">public class proxy {
    public static void main(String[] args) {
        final ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;();
        ClassLoader classLoader = list.getClass().getClassLoader();
        Class&lt;?&gt;[] interfaces = list.getClass().getInterfaces();
        List&lt;String&gt; listProxy=(List&lt;String&gt;) Proxy.newProxyInstance(classLoader,interfaces , new InvocationHandler() {
            @Override
            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                return method.invoke(list,args);
            }
        });
        listProxy.add(&quot;你好&quot;) ;
        System.out.println(list);
    }
}
</code></pre>
<p>还有一种动态代理 CGLIB，代理的是类，不需要业务类继承接口，通过派生的子类来实现代理。通过在运行<br>
时，动态修改字节码达到修改类的目的。</p>
<h2 id="7-java-注解">7. Java 注解</h2>
<p>Java 注解是附加在代码中的一些元信息，用于一些工具在编译、运行时进行解析和使用，起到说明、配置的功能。</p>
<p>其中Java有四种元注解，用来标注其他的注解：</p>
<ul>
<li>@Target: 修饰的对象范围。</li>
<li>@Retention： 定义被保留的时间长短
<ul>
<li>SOURCE:在源文件中有效（即源文件保留）</li>
<li>CLASS:在 class 文件中有效（即 class 保留）</li>
<li>RUNTIME:在运行时有效（即运行时保留）</li>
</ul>
</li>
<li>@Documented：  描述-javadoc</li>
<li>@Inherited ：  阐述了某个被标注的类型是被继承的</li>
</ul>
<h2 id="8-java-泛型">8. Java 泛型</h2>
<ol>
<li>更符合面向抽象的编程：与普通的 Object 代替一切类型这样简单粗暴而言，泛型使得数据的类别可以像参数一样由外部传递进来。它提供了一种扩展能力。</li>
<li>是一种安全监测的机制：当具体的类型确定后，只有相匹配的数据才能正常的赋值，否则编译器就不通过。所以说，它是一种类型安全检测机制，一定程度上提高了软件的安全性防止出现低级的失误。</li>
<li>提高代码的可读性：泛型提高了程序代码的可读性，不必要等到运行的时候才去强制转换，在定义或者实例化阶段，程序员能够一目了然猜测出代码要操作的数据类型。</li>
</ol>
<p>出于规范的目的，Java建议使用单个大写字母来代表类型参数。常见的如：</p>
<ol>
<li>T 代表：任何类；</li>
<li>E 代表 ：泛型方法；</li>
<li>K 代表 ：Key 的意思；</li>
<li>V 代表： Value 的意思，通常与 K 一起配合使用；</li>
</ol>
<h3 id="81-泛型的使用情形">8.1 泛型的使用情形</h3>
<ol>
<li>
<p>泛型方法**<E>**</p>
<pre><code class="language-java">public static &lt; E &gt; void printArray( E[] inputArray ){
	for ( E element : inputArray ){
		System.out.printf( &quot;%s &quot;, element );
	}
}
</code></pre>
</li>
<li>
<p>泛型类**<T>**</p>
<pre><code class="language-java">public class Box&lt;T&gt; {
	private T t;
	public void add(T t) {
		this.t = t;
	}
	public T get() {
		return t;
	}
}
</code></pre>
</li>
</ol>
<h3 id="82-通配符">8.2 通配符&lt;?&gt;</h3>
<p>通配符具有下面三种形式：</p>
<ol>
<li><code>&lt;?&gt;</code>：被称为无限定通配符，它其中的 ? 其实代表的是未知类型，所以涉及到 ? 时的操作，一定与具体类型无关。</li>
<li><code>&lt;? extends T&gt;</code>：被称作有上限的通配符，表示该通配符所代表的类型是 T 类型的子类。</li>
<li><code>&lt;? super T&gt;</code>：被称作有下限的通配符，表示该通配符所代表的类型是 T 类型的父类。</li>
</ol>
<h3 id="83-类型擦除">8.3 类型擦除</h3>
<p>Java 中的泛型基本上都是在编译器这个层次来实现的。在生成的 Java 字节代码中是不包含泛型中的类型信息的。类型擦除的基本过程也比较简单，首先是找到用来替换类型参数的具体类。这个具体类一般是 Object。如果指定了类型参数的上界的话，则使用这个上界。把代码中的类型参数都替换成具体的类。</p>
<p>注意事项：</p>
<ol>
<li>在泛型方法或者泛型类中，不接受8种基本数据类型</li>
<li>Java不能创建具体类型的泛型数组</li>
</ol>
<h2 id="9-java内部类">9. Java内部类</h2>
<p>内部类可分为：成员内部类（类中）、局部内部类（方法中）、匿名内部类、和静态内部类</p>
<h3 id="91-成员内部类">9.1 成员内部类</h3>
<p>定义在类内部的非静态类，就是成员内部类：它具有以下几个特点：</p>
<ol>
<li>可以访问外部类的所有成员属性和方法</li>
<li>不能存在任何Static(静态)变量和方法（因为在类的初始化过程中，会先加载静态成员，而如果内部类是非静态的，如果含有静态成员，会产生歧义）</li>
<li>先创建外部类，才能创建内部类</li>
</ol>
<p>例如：</p>
<pre><code class="language-java">public class Out {
    private static int a;
    private int b;
    public class Inner {
    	public void print() {
   			System.out.println(a);
    		System.out.println(b);
    	}
    }
}
</code></pre>
<h3 id="92-局部内部类">9.2 局部内部类</h3>
<p>嵌套在方法和作用域中，不能使用<code>public</code>、<code>private</code>、<code>protect</code>。</p>
<pre><code class="language-java">public class Out {
	private static int a;
	private int b;
	public void test(final int c) {
		final int d = 1;
		class Inner {
			public void print() {
				System.out.println(c);
			}
		}
	}
}
</code></pre>
<h3 id="93-匿名内部类">9.3 匿名内部类</h3>
<p>匿名内部类我们必须要继承一个父类或者实现一个接口，当然也仅能只继承一个父类或者实现一个接口。同时它也是没有class关键字，这是因为匿名内部类是直接使用new来生成一个对象的引用。</p>
<p>具有以下的特性：</p>
<ol>
<li>创建的对象没有名字</li>
<li>不可以家访问修饰符</li>
<li>当所在方法的形参需要被内部类里使用时，该形参必须被final修饰</li>
<li>不可引用在接口中定义的方法</li>
</ol>
<p>例如：</p>
<pre><code class="language-java">abstract class Person {
    public abstract void eat();
}
 
public class Demo {
    public static void main(String[] args) {
        Person p = new Person() {
            public void eat() {
                System.out.println(&quot;eat something&quot;);
            }
        };
        p.eat();
    }
}
</code></pre>
<h3 id="94-静态内部类">9.4 静态内部类</h3>
<p>定义在类内部的静态类，就是静态内部类。具有以下特点：</p>
<ol>
<li>创建不需要依赖外部类</li>
<li>不能使用任何外部类的非static成员和方法</li>
<li>可以声明静态方法</li>
</ol>
<p>例如：</p>
<pre><code class="language-java">public class Out {
	private static int a;
	private int b;
	public static class Inner {
		public void print() {
			System.out.println(a);
		}
	}
}
</code></pre>
<h2 id="10-java-枚举enum">10. Java 枚举（Enum）</h2>
<p>Enum 是jdk1.5以后引入的一个新特性。这个特性可以使得我们的代码变得更加的简洁、安全以及便捷。</p>
<h3 id="101-enum的简单使用">10.1 Enum的简单使用</h3>
<ul>
<li>
<p>常量的使用：以前我们定义常量会选择这样的方式：<strong>public static final</strong>，而当枚举出现后，我们可以使用这样的方式实现常量的定义：</p>
<pre><code class="language-java">public enum Day {
    MONDAY, TUESDAY, WEDNESDAY,
    THURSDAY, FRIDAY, SATURDAY, SUNDAY
}
</code></pre>
</li>
<li>
<p>自定义方法：使用Enum实现对异常的统一定义：</p>
<pre><code class="language-java">public enum ResultEnum {
    /**
     * 系统未知错误
     */
    UNKONW_ERROR(-1,&quot;未知错误：&quot;),
     /**
      * 请求成功
      */
    SUCCESS(0,&quot;success&quot;),
    /**
     * 请求缺少参数
     */
    LACK_PARAMETER(1,&quot;缺少参数&quot;);
    /**
     * 错误码
     */
    private Integer errorCode;
    /**
     * 错误提示信息
     */
    private String message;

    ResultEnum(Integer errorCode, String message) {
        this.errorCode = errorCode;
        this.message = message;
    }

    public Integer getErrorCode() {
        return errorCode;
    }
    
    public String getMessage() {
        return message;
    }
}
</code></pre>
</li>
<li>
<p>switch使用：JDK1.6之前的switch语句只支持int,char,enum类型，使用枚举，能让我们的代码可读性更强。（jdk1.7以后Switch补充支持了string类型）</p>
<pre><code class="language-java">enum Color {GREEN,RED,BLUE}

public class EnumDemo4 {

    public static void printName(Color color){
        switch (color){
            case BLUE: //无需使用Color进行引用
                System.out.println(&quot;蓝色&quot;);
                break;
            case RED:
                System.out.println(&quot;红色&quot;);
                break;
            case GREEN:
                System.out.println(&quot;绿色&quot;);
                break;
        }
    }

    public static void main(String[] args){
        printName(Color.BLUE);
        printName(Color.RED);
        printName(Color.GREEN);
    }
}
</code></pre>
</li>
</ul>
<h3 id="102-enum实现原理">10.2 Enum实现原理</h3>
<p>实际上在使用关键字enum创建枚举类型并编译后，编译器会为我们生成一个相关的class，这个类继承了Java API中的java.lang.Enum类，也就是说通过关键字enum创建枚举类型在编译后事实上也是一个class类型而且该类继承自java.lang.Enum类。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[不是吧，工作导师比我先润？]]></title>
        <id>https://Newtol.github.io/post/bu-shi-ba-gong-zuo-dao-shi-bi-wo-xian-run/</id>
        <link href="https://Newtol.github.io/post/bu-shi-ba-gong-zuo-dao-shi-bi-wo-xian-run/">
        </link>
        <updated>2022-04-09T05:47:42.000Z</updated>
        <content type="html"><![CDATA[<p>那天，我像往常一样打开电脑准备开始新一天的工（mo）作（yu）</p>
<figure data-type="image" tabindex="1"><img src="https://pica.zhimg.com/80/v2-1530c66ffc3733cb61634f3c4005f031_720w.jpg?source=1940ef5c" alt="" loading="lazy"></figure>
<p>突然，收到导师发来的一条消息：”我后面工作会有变动，你可能需要作为A服务的Owner。你要有心理准备“</p>
<p>起初我还以为只是简单工作内容上的变动，之前他也提过，组长希望他后面可以去接手另一块B业务。于是问了他是不是精力不够，需要去全力负责B业务模块</p>
<p>导师：”我后面可能会去其他部门“</p>
<p>我瞬间没了工（kun）作（yi）兴（quan）趣（wu）</p>
<figure data-type="image" tabindex="2"><img src="https://pic1.zhimg.com/80/v2-2af1af0cc4bd746270c1f67ecffe6a60_720w.jpg?source=1940ef5c" alt="" loading="lazy"></figure>
<p>该说不说，从毕业到现在，在这个部门工作也一年有余，</p>
<p>加上之前大三的实习，和导师的接触的时间也快两年了。</p>
<p>当初毕业在拿了互联网的几个sp offer后，还是在他的劝说下加入了现在的部门。</p>
<p>在平时的聊天中，他给我的感觉也是对当前的工作和领导很满意，</p>
<p>同时，部门和组长也对他的技术能力给予了很强的认可，</p>
<p>我感觉他和部门之间属于”双向奔赴“，</p>
<p>所以我一直都以为会比他更先离开，没想到他先润（run）了。</p>
<figure data-type="image" tabindex="3"><img src="https://pica.zhimg.com/80/v2-f2a3820b534629b98488055ceed33543_720w.jpg?source=1940ef5c" alt="" loading="lazy"></figure>
<p>所以我对于他的选择不是很理解，他提议一起下楼去走走，</p>
<p>在聊天的过程中，他也解答我了心中的疑惑：</p>
<p>他透露说，想换个环境的想法在年后就已经产生了，</p>
<p>一方面，他考虑到后面的发展和现实来自家庭的压力；</p>
<p><strong>另一方面，在一个领域工作了3-5年后，他也希望自己换个赛道看看，让自己不至于陷入某个圈子之中。</strong></p>
<p>他拍着我的肩膀说道：</p>
<blockquote>
<p>我的离开或许对你不是件坏事，如果你一直做个coder是很难得到成长的。我们老人的离开就像流水一样，需要用新人来代替。所以随时都要有危机意识，现在每天睡前我都还会看一个小时的书</p>
</blockquote>
<figure data-type="image" tabindex="4"><img src="https://pic1.zhimg.com/80/v2-758fd57b28f35c9f02cad1d4c9d73492_720w.jpg?source=1940ef5c" alt="" loading="lazy"></figure>
<p>回想起来，在毕业的一年多时间里，身边也陆续有人选择了悄然离开了公司，也不断有新鲜的血液加入</p>
<p>但在最近两年的大环境下，”跑路“似乎也真的需要一些勇气和底气。</p>
<p>导师工作的变动，确实也给我自己敲响了警钟，重新开始审视自己的职业规划</p>
<p>在参加工作的这一年多时间里，自己也似乎疲于完成工作上的任务，每天奔波于公司和出租屋之间</p>
<p>博客和公众号也几乎停更了近两年，除了工作需要，花在提升自己的时间也似乎越来越少</p>
<p>更多的满足于当前的现状，颇有被温水煮青蛙之感</p>
<figure data-type="image" tabindex="5"><img src="https://pic1.zhimg.com/80/v2-a98ab5b4d2610067a075d69478640562_720w.jpg?source=1940ef5c" alt="" loading="lazy"></figure>
<p>在刚知道导师要离职的几天的时间里，自己内心充满了茫然感</p>
<p>一是第一次亲历身边如此近的人的离职</p>
<p>平时亦师亦友的关系，让我们可以针对不同的观点而争论，也可以针对Bug共同商讨解决的方案</p>
<p>当然也有成为服务Owner后执行者变成决策者的身份的转变的不适应，担心会更加疲于代码之外的事</p>
<p>另一方面也开始怀疑之前我们所追求的代码”洁癖“是否正确，毕竟当我们离职时，曾经所争论的和坚持的似乎都不那么重要了，</p>
<p>或许能够换来了，也只是一句问心无愧</p>
<p>或许真如他所说，他的离职将让我的职业生涯迎来新的阶段，但谁也不知道乌云背后是阳光还是狂风暴雨。</p>
<p>心中虽有千言，但真正提笔的时候，又感觉无话可说，也不知该从何说起。</p>
<p>总之谢谢这位工作上的导师&amp;朋友 新的工作工作顺利，</p>
<p>也希望自己能从容的面对来自未来的变数。</p>
<figure data-type="image" tabindex="6"><img src="https://pic2.zhimg.com/80/v2-71e5d57ce4abcee1227e376a9d491a43_720w.jpg?source=1940ef5c" alt="" loading="lazy"></figure>
<p>同时也欢迎大家关注我的公众号：<br>
<img src="https://Newtol.github.io/post-images/1649483365140.png" alt="" loading="lazy"></p>
]]></content>
    </entry>
</feed>